version
#### PARTIE 1
##1##
Orthodont<-read.table("orthodont.csv",sep=",",header=T)
data("Orthodont", package="nlme")
#### PARTIE 1
##1##
#Orthodont<-read.table("orthodont.csv",sep=",",header=T)
data("Orthodont", package="nlme")
head(Orthodont)
##2##
library(ggplot2)
theme_set(theme_bw())
pl <- ggplot(data=Orthodont) + geom_point(aes(x=age,y=distance), color="red", size=3)
pl
aggregate(Orthodont$distance, list(Orthodont$Sex,Orthodont$age), mean)
#### PARTIE 2
##1##
lm1 <- lm(distance~age, data=Orthodont)
summary(lm1)
##2##
pl + geom_line(aes(x=age,y=predict(lm1)))+ facet_grid(.~ Sex )
##3##
lm2 <- lm(distance~age+Sex, data=Orthodont)
summary(lm2)
Orthodont$pred.lm2 <- predict(lm2)
pl + geom_line(data=Orthodont,aes(x=age,y=pred.lm2)) + facet_grid(.~ Sex )
##4##
lm3 <- lm(distance~age:Sex , data=Orthodont)
summary(lm3)
Orthodont$pred.lm3 <- predict(lm3)
pl + geom_line(data=Orthodont,aes(x=age,y=pred.lm3)) + facet_grid(.~ Sex )
##5##
lm4 <- lm(distance~age:Sex+Sex, data=Orthodont)
#### PARTIE 2
##1##
lm1 <- lm(distance~age, data=Orthodont)
summary(lm1)
##2##
pl + geom_line(aes(x=age,y=predict(lm1)))+ facet_grid(.~ Sex )
##3##
lm2 <- lm(distance~age+Sex, data=Orthodont)
summary(lm2)
Orthodont$pred.lm2 <- predict(lm2)
pl + geom_line(data=Orthodont,aes(x=age,y=pred.lm2)) + facet_grid(.~ Sex )
##4##
lm3 <- lm(distance~age:Sex , data=Orthodont)
summary(lm3)
Orthodont$pred.lm3 <- predict(lm3)
pl + geom_line(data=Orthodont,aes(x=age,y=pred.lm3)) + facet_grid(.~ Sex )
##5##
lm4 <- lm(distance~age:Sex+Sex, data=Orthodont)
summary(lm4)
Orthodont$pred.lm4 <- predict(lm4)
pl + geom_line(data=Orthodont,aes(x=age,y=pred.lm4)) + facet_grid(.~ Sex )
##6##
BIC(lm1,lm2,lm3, lm4)
##7##
Subject.select <- c(paste0("M0",5:8),paste0("F0",2:5))
Orthodont.select <- subset(Orthodont,Subject %in% Subject.select)
ggplot(data=Orthodont.select) + geom_point(aes(x=age,y=distance), color="red", size=3) +
geom_line(aes(x=age,y=predict(lm3,newdata=Orthodont.select))) + facet_wrap(~Subject, nrow=2)
#### PARTIE 3
library(ggplot2)
theme_set(theme_bw())
ggplot(data=Orthodont) + geom_point(aes(x=age,y=distance), color="red", size=3)  +
geom_line(aes(x=age,y=distance,group=Subject)) # +  facet_grid(~Sex)
##1##
library(lme4)
library(afex)
lmm1 <- lmer(distance ~ age + (age|Subject), data = Orthodont)
summary(lmm1)
anova(lmm1)
##2##
(psi.pop <- fixef(lmm1))
(Omega <- VarCorr(lmm1)$Subject[,])
(sigma2 <- attr(VarCorr(lmm1), "sc")^2)
coef(lmm1)$Subject
##3##
Orthodont$pred.lmm1 <- fitted(lmm1)
ggplot(data=subset(Orthodont,Subject %in% Subject.select)) + geom_point(aes(x=age,y=distance), color="red", size=3) +
geom_line(aes(x=age,y=pred.lmm1)) + facet_wrap(~Subject, ncol=4)
# 1.1 #
#importing data :
data = read.table("arv_hiv.txt", header = TRUE)
setwd("/Users/jordanbonil/Documents/Mixed\ Effects\ Models/projet/")
setwd("/Users/jordanbonil/Documents/Mixed\ Effects\ Models/projet/")
# 1.1 #
#importing data :
data = read.table("arv_hiv.txt", header = TRUE)
is.na(data)
sum(is.na(data))
omit.na(data)
na.omit(data)
na.omit(data).shape
len(na.omit(data))
length(na.omit(data))
summary(na.omit(data))
data = na.omit(data)
# normalising data :
mu_VL = mean(data$VL)
sig_VL = sd(data$VL)
mu_CD4 = mean(data$CD4)
sig_CD4 = sd(data$CD4)
length(data$VL)
length(data$CD4)
setwd("/Users/jordanbonil/Documents/Mixed\ Effects\ Models/projet/")
# 1.1 #
#importing data :
data = read.table("arv_hiv.txt", header = TRUE)
# removing NA variables :
data = na.omit(data)
# normalising data :
n = length(data$VL)
mu_VL = mean(data$VL)
sig_VL = sqrt(n)*sd(data$VL)
mu_CD4 = mean(data$CD4)
sig_CD4 = sqrt(n)*sd(data$CD4)
data$new = data$CD4-mu_CD4/sig_CD4
setwd("/Users/jordanbonil/Documents/Mixed\ Effects\ Models/projet/")
# 1.1 #
#importing data :
data = read.table("arv_hiv.txt", header = TRUE)
# removing NA variables :
data = na.omit(data)
# normalising data :
n = length(data$VL)
mu_VL = mean(data$VL)
sig_VL = sqrt(n)*sd(data$VL)
mu_CD4 = mean(data$CD4)
sig_CD4 = sqrt(n)*sd(data$CD4)
test = (data$CD4 - mu_CD4)/sig_CD4
test
require(smooth)
qqnorm(data$CD4)
qqnorm(test)
qqnorm(0.25*test)
test = (data$VL - mu_VL)/sig_VL
test
qqnorm(test)
qqnorm(data$CD'')
qqnorm(data$CD'')
qqnorm(data$CD4)
qqnorm(data$VL)
qqnorm(data$VL)
qqnorm(test)
qqnorm(log(test)/log(10))
sum(is.na(log(test)/log(10)))/length(test)
sum(is.na(log(test)/log(10)))
qqnorm(0.25*data$CD4)
qqnorm(0.25*data$CD4, main = "cd' normalised (.)0.25")
qqnorm(0.25*data$CD4, main = "data$CD4 normalised (.)0.25")
qqnorm(data$CD4, main = "data$CD4 raw")
qqnorm(data$VL, main = "data$VL raw")
qqnorm(log(data$VL)/log(10), main = "data$VL normalised log10(.)")
qqnorm(na.omit(log(data$VL)/log(10)), main = "data$VL normalised log10(.)")
na.omit(log(data$VL)/log(10))
qqnorm(na.omit(log((data$VL-mu_VL)/sig_VL)/log(10)), main = "data$VL normalised log10(.)")
qqnorm(0.25*na.omit(log((data$VL-mu_VL)/sig_VL)/log(10)), main = "data$VL normalised log10(.)")
#setwd("/Users/jordanbonil/Documents/Mixed\ Effects\ Models/projet/")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1.1 #
#importing data :
data = read.table("arv_hiv.txt", header = TRUE)
# removing NA variables :
data = na.omit(data)
par(mfrow=c(1,2))
qqnorm(data$CD4, main = "CD4 before normalisation")
data$CD4 = data$CD4^0.25
qqnorm(data$CD4, main = "CD4 after ^0.25")
par(mfrow=c(1,2))
qqnorm(data$VL, main = "VL before normalisation")
data$VL = log(data$VL)/log(10)
qqnorm(data$VL, main = "qqplot for log10(VL)")
#the normalisation for VL is greatly improved
data$dd4Tddl = as.numeric(data$RAN_GRP != 1)
# 1.2 #
summary(data)
# in order to plot the average trajectory,
# on times where there is only one val, we print this val
# on times where there are multiple vals, we average the vals
par(mfrow=c(1,1))
# using aggregate(df$col_to_aggregate, list(df$col_to_group_by), FUN=mean)  ?
VL_avg = aggregate(data$VL, list(data$TIME), FUN=mean)
plot(VL_avg, type = "b", main = "Average trajectory for Viral Load wrt to Time", xlab = "days", ylab = "VL")
CD4_avg = aggregate(data$CD4, list(data$TIME), FUN=mean)
plot(CD4_avg, type = "b", main = "Average trajectory for CD4 concentration wrt to Time", xlab = "days", ylab = "cc/m3")
library(zoo)
plot(rollmean(CD4_avg$x, k=73), main = "Rolling Average of mean CD4 trajectory", xlab = "days")
plot(rollmean(VL_avg$x, k=73), main = "Rolling Average of mean VL trajectory", xlab = "days")
#setwd("/Users/jordanbonil/Documents/Mixed\ Effects\ Models/projet/")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1.1 #
#importing data :
data = read.table("arv_hiv.txt", header = TRUE)
# removing NA variables :
data = na.omit(data)
par(mfrow=c(1,2))
qqnorm(data$CD4, main = "CD4 before normalisation")
data$CD4 = data$CD4^0.25
qqnorm(data$CD4, main = "CD4 after ^0.25")
par(mfrow=c(1,2))
#setwd("/Users/jordanbonil/Documents/Mixed\ Effects\ Models/projet/")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1.1 #
#importing data :
data = read.table("arv_hiv.txt", header = TRUE)
# removing NA variables :
data = na.omit(data)
par(mfrow=c(1,2))
qqnorm(data$CD4, main = "CD4 before normalisation")
data$CD4 = data$CD4^0.25
qqnorm(data$CD4, main = "CD4 after ^0.25")
par(mfrow=c(1,2))
qqnorm(data$VL, main = "VL before normalisation")
#setwd("/Users/jordanbonil/Documents/Mixed\ Effects\ Models/projet/")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1.1 #
#importing data :
data = read.table("arv_hiv.txt", header = TRUE)
# removing NA variables :
data = na.omit(data)
par(mfrow=c(1,2))
qqnorm(data$CD4, main = "CD4 before normalisation")
data$CD4 = data$CD4^0.25
qqnorm(data$CD4, main = "CD4 after ^0.25")
par(mfrow=c(1,2))
par(mfrow=c(1,2))
qqnorm(data$VL, main = "VL before normalisation")
data$VL = log(data$VL)/log(10)
qqnorm(data$VL, main = "qqplot for log10(VL)")
#the normalisation for VL is greatly improved
data$dd4Tddl = as.numeric(data$RAN_GRP != 1)
# 1.2 #
summary(data)
# in order to plot the average trajectory,
# on times where there is only one val, we print this val
# on times where there are multiple vals, we average the vals
par(mfrow=c(1,1))
# using aggregate(df$col_to_aggregate, list(df$col_to_group_by), FUN=mean)  ?
VL_avg = aggregate(data$VL, list(data$TIME), FUN=mean)
plot(VL_avg, type = "b", main = "Average trajectory for Viral Load wrt to Time", xlab = "days", ylab = "VL")
install.packages("/Applications/MonolixSuite2020R1.app/Contents/Resources/\
monolixSuite/connectors/lixoftConnectors.tar.gz",
repos = NULL, type="source", INSTALL_opts ="--no-multiarch")
install.packages("/Applications/MonolixSuite2021R1.app/Contents/Resources/\
monolixSuite/connectors/lixoftConnectors.tar.gz",
repos = NULL, type="source", INSTALL_opts ="--no-multiarch")
install.packages("/Applications/MonolixSuite2021R1.app/Contents/Resources/monolixSuite/connectors/lixoftConnectors.tar.gz",
repos = NULL, type="source", INSTALL_opts ="--no-multiarch")
install.packages("RJSONIO")
install.packages("ggplot2")
install.packages("/Applications/MonolixSuite2021R1.app/Contents/Resources/monolixSuite/connectors/lixoftConnectors.tar.gz",
repos = NULL, type="source", INSTALL_opts ="--no-multiarch")
install.packages("gridExtra")
install.packages("/Applications/MonolixSuite2021R1.app/Contents/Resources/monolixSuite/connectors/lixoftConnectors.tar.gz",
repos = NULL, type="source", INSTALL_opts ="--no-multiarch")
